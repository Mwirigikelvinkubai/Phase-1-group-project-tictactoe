# Tic Tac Toe Game

## Overview
This project is a simple Tic Tac Toe game built with HTML, CSS, and JavaScript. It allows two players to take turns and play on a 3x3 grid, with functionality to detect the winner and restart the game.

---

## Project Structure
- **index.html**: Defines the structure of the game.
- **style.css**: Manages the layout and appearance.
- **script.js**: Handles game logic and interactivity.

---

## HTML Structure
The HTML provides the visual layout for the game. It includes:
- A `<div>` with a class `board` that contains 9 boxes.
- A `<p>` tag to show the current player's turn.
- A `<button>` to restart the game.

```html
<div class="board">
  <div class="box" data-index="0"></div>
  <div class="box" data-index="1"></div>
  <div class="box" data-index="2"></div>
  <div class="box" data-index="3"></div>
  <div class="box" data-index="4"></div>
  <div class="box" data-index="5"></div>
  <div class="box" data-index="6"></div>
  <div class="box" data-index="7"></div>
  <div class="box" data-index="8"></div>
</div>
<p class="status">Player 1's turn</p>
<button class="restart">Restart Game</button>
```

---

## CSS (style.css)
Handles the visual styling of the board and game elements.
- Grid layout for the game board.
- Styles for the boxes and game status.
- Disabled pointer events when a box is taken.

---

## JavaScript (script.js)
The script manages the game logic and user interaction.

### Step 1: Select DOM Elements
```javascript
const boxes = document.querySelectorAll('.box');
const status = document.querySelector('.status');
const restartButton = document.querySelector('.restart');
```
These elements allow us to update the UI and manage game state.

### Step 2: Initialize Game State
```javascript
let currentPlayer = 'X';
let gameBoard = Array(9).fill(null);
```
`currentPlayer` tracks whose turn it is, and `gameBoard` stores the state of each box.

### Step 3: Check for a Winner
```javascript
const checkWinner = () => {
  const winningCombinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6]
  ];

  for (const combination of winningCombinations) {
    const [a, b, c] = combination;
    if (
      gameBoard[a] &&
      gameBoard[a] === gameBoard[b] &&
      gameBoard[a] === gameBoard[c]
    ) {
      return gameBoard[a];
    }
  }
  return gameBoard.includes(null) ? null : 'Draw';
};
```
This function checks all possible winning combinations.

### Step 4: Handle Box Click
```javascript
const handleClick = (e) => {
  const index = e.target.dataset.index;
  if (!gameBoard[index]) {
    gameBoard[index] = currentPlayer;
    e.target.textContent = currentPlayer;
    e.target.classList.add('taken');

    const winner = checkWinner();
    if (winner) {
      status.textContent = winner === 'Draw' ? "It's a draw!" : `${winner} wins!`;
      boxes.forEach(box => box.classList.add('taken'));
    } else {
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      status.textContent = `Player ${currentPlayer === 'X' ? '1' : '2'}'s turn`;
    }
  }
};
```
Handles the click event, updates the game state, and checks for a winner.

### Step 5: Restart the Game
```javascript
const restartGame = () => {
  gameBoard.fill(null);
  currentPlayer = 'X';
  status.textContent = "Player 1's turn";
  boxes.forEach(box => {
    box.textContent = '';
    box.classList.remove('taken');
  });
};
```
Resets the game state and clears the UI.

### Step 6: Add Event Listeners
```javascript
boxes.forEach(box => box.addEventListener('click', handleClick));
restartButton.addEventListener('click', restartGame);
```
Links the click events to the boxes and restart button.

---

## Conclusion
This project demonstrates how to build a simple interactive game using core web technologies. It handles user interaction, game logic, and UI updates effectively.

